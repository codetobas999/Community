import socket

def open_socket(host,port):    
    s = socket.socket(socket.AF_INET ,socket.SOCK_STREAM) #TPC/IP , UDP
    #host = ''
    #port = 80
    s.bind((host,port))
    s.listen(1)
    return s

'''
s.bind() : ที่อยู่ผูก (โฮสต์พอร์ต) เพื่อซ็อกเก็ตที่ AF_INET ในรูปแบบของ tuple (โฮสต์พอร์ต) ระบุที่อยู่
s.listen() : เริ่ม TCP ฟัง ค้างที่ระบุไว้ก่อนที่จะปฏิเสธการเชื่อมต่อระบบปฏิบัติการที่สามารถระงับจำนวนสูงสุดของการเชื่อมต่อ ค่านี้เป็นอย่างน้อย 1 ใช้งานมากที่สุดที่สามารถตั้งค่า 5
s.accept() : ยอมรับ passive ของการเชื่อมต่อลูกค้า TCP (ปิดกั้น) รอการมาถึงของ
ซ็อกเก็ตไคลเอนต์
s.connect() : การเชื่อมต่อเซิร์ฟเวอร์การเริ่มต้นใช้งาน TCP socket.error อยู่ทั่วไปของรูปแบบของสิ่งอันดับ (ชื่อโฮสต์พอร์ต) ว่าข้อผิดพลาดการเชื่อมต่อข้อผิดพลาดจะถูกส่งกลับ
s.connect_ex() : เชื่อมต่อ () รุ่นที่ขยายจากฟังก์ชั่นส่งกลับรหัสข้อผิดพลาดเมื่อมีข้อผิดพลาดแทนการขว้างปาข้อยกเว้น
ฟังก์ชั่นซ็อกเก็ตวัตถุประสงค์สาธารณะ
s.recv() : รับข้อมูล TCP ข้อมูลที่ถูกส่งกลับเป็นสตริงระบุจำนวนเงินสูงสุดของข้อมูลที่จะได้รับ bufsize ให้ข้อมูลเพิ่มเติมเกี่ยวกับธงข้อความสามารถมักจะถูกละเลย
s.send() : ส่งข้อมูล TCP ส่งสตริงข้อมูลเพื่อการเชื่อมต่อซ็อกเก็ต ค่าตอบแทนเป็นจำนวนไบต์ที่จะส่งตัวเลขนี้อาจจะน้อยกว่าสตริงไบต์
s.sendall() : ข้อมูล TCP ส่งเสร็จสมบูรณ์แล้วส่งข้อมูล TCP สมบูรณ์ มันจะส่งสตริงข้อมูลเพื่อการเชื่อมต่อซ็อกเก็ต แต่ก่อนที่จะกลับจะพยายามที่จะส่งข้อมูลทั้งหมด กลับประสบความสำเร็จไม่มีข้อยกเว้นความล้มเหลวที่จะถูกโยนทิ้ง
s.recvform() : ได้รับข้อมูล UDP () คล้ายกับ recv แต่ค่าตอบแทนเป็น (ข้อมูลที่อยู่) ประเด็นข้อมูลที่เป็นสตริงที่มีข้อมูลที่ได้รับข้อมูลที่อยู่จะถูกส่งไปอยู่ซ็อกเก็ต
s.sendto() : ส่งข้อมูล UDP, ส่งข้อมูลไปยังซ็อกเก็ตที่อยู่ในรูปแบบของ (ipaddr พอร์ต) tuple ที่ระบุที่อยู่ห่างไกล ค่าตอบแทนเป็นจำนวนไบต์ที่ส่ง
s.close() : ปิดซ็อกเก็ต
s.getpeername() : ผลตอบแทนที่อยู่ระยะไกลเชื่อมต่อซ็อกเก็ต ค่าตอบแทนมักจะ tuple A (ipaddr พอร์ต)
s.getsockname() : ผลตอบแทนที่ได้อยู่เองซ็อกเก็ตของ มักจะเป็น tuple (ipaddr พอร์ต)
s.setsockopt(ระดับ optName ค่า) : กำหนดค่าของตัวเลือกซ็อกเก็ตที่กำหนด
s.getsockopt(ระดับ optName [.buflen]) : ค่าตอบแทนของตัวเลือกซ็อกเก็ต
s.settimeout(หมดเวลา) : ชุดซ็อกเก็ตเป็นเวลาการทำงานหมดเวลาหมดเวลาเป็นจำนวนจุดลอยตัวในไม่กี่วินาที ไม่มีค่าบ่งชี้ระยะเวลาที่ไม่มีเวลาออก โดยทั่วไปแล้วระยะเวลาการหมดเวลาก็ควรจะสร้างชุดซ็อกเก็ตเพราะพวกเขาอาจจะใช้ในการดำเนินการเชื่อมต่อ (เช่นการเชื่อมต่อ ())
s.gettimeout() : ส่งกลับค่าของระยะเวลาการหมดเวลาปัจจุบันในไม่กี่วินาทีถ้ามีระยะเวลาการหมดเวลาไม่มีการกำหนดผลตอบแทนไม่
s.fileno() : ผลตอบแทนที่ได้อธิบายไฟล์ซ็อกเก็ต
s.setblocking(ธง) : ถ้าธงเป็น 0 ซ็อกเก็ตที่ถูกกำหนดเป็นโหมดที่ไม่ใช่การปิดกั้นมิฉะนั้นซ็อกเก็ตไปยังโหมดการปิดกั้น (ค่าเริ่มต้น) โหมด non-blocking ถ้าคุณโทร recv () ไม่พบข้อมูลใด ๆ หรือส่งโทร () ไม่สามารถส่งข้อมูลได้ทันทีก็จะทำให้เกิดข้อยกเว้น socket.error
s.makefile() : สร้างเอกสารที่เกี่ยวข้องในการเชื่อมต่อกับซ็อกเก็ต
'''